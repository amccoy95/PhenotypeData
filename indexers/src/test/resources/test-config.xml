<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <bean id="executorService" class="java.util.concurrent.Executors"
          factory-method="newFixedThreadPool">
        <constructor-arg value="20" />
    </bean>

    <task:annotation-driven mode="proxy" executor="executorService" />
    <task:executor id="threadPoolTaskExecutor" />

    <!-- Define the global parameters used when deploying without maven -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:testConfig.properties</value>
                <value>file:${user.home}/configfiles/${profile}/test.properties</value>
            </list>
        </property>
    </bean>

    <bean id="observationSolrServer" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${internalSolrUrl}/experiment"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>

    <!-- phenodigm external solr server via HTTP -->
    <bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
        <constructor-arg index="0" value="${phenodigmSolrUrl}" />
    </bean>

    <bean id="releaseDAO" class="org.mousephenotype.cda.db.dao.AnalyticsDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>


    <bean id="statisticalResultDAO" class="org.mousephenotype.cda.db.dao.StatisticalResultDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>


    <context:annotation-config/>

    <!-- Weaves in transactional advice around @Transactional methods -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="biologicalModelDAO" class="org.mousephenotype.cda.db.dao.BiologicalModelDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>


    <bean id="observationDAO" class="org.mousephenotype.cda.db.dao.ObservationDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="phenotypeCallSummaryDAO" class="org.mousephenotype.cda.db.dao.PhenotypeCallSummaryDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="phenotypePipelineDAO" class="org.mousephenotype.cda.db.dao.PhenotypePipelineDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="alleleDAO" class="org.mousephenotype.cda.db.dao.AlleleDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="genomicFeatureDAO" class="org.mousephenotype.cda.db.dao.GenomicFeatureDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="ontologyTermDAO" class="org.mousephenotype.cda.db.dao.OntologyTermDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="sequenceRegionDAO" class="org.mousephenotype.cda.db.dao.SequenceRegionDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="strainDAO" class="org.mousephenotype.cda.db.dao.StrainDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="datasourceDAO" class="org.mousephenotype.cda.db.dao.DatasourceDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="projectDAO" class="org.mousephenotype.cda.db.dao.ProjectDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="organisationDAO" class="org.mousephenotype.cda.db.dao.OrganisationDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="referenceDAO" class="org.mousephenotype.cda.db.dao.ReferenceDAO" />

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="komp2DataSource"/>
        <property name="packagesToScan" value="org.mousephenotype.cda.db.pojo"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.charSet">UTF8</prop>
            </props>
        </property>
    </bean>

    <!-- Drives transactions using Hibernate APIs when requested -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- Translates Hibernate exceptions to Spring Data Access Exceptions -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="globalConfiguration" class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="targetMapClass">
            <value>java.util.HashMap</value>
        </property>
        <property name="sourceMap">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="baseUrl" value="${baseUrl}" />
                <entry key="drupalBaseUrl" value="${drupalBaseUrl}" />
                <entry key="solrUrl" value="${solrUrl}" />
                <entry key="solrUrl" value="${solrUrl}" />
                <entry key="mediaBaseUrl" value="${mediaBaseUrl}" />
                <entry key="googleAnalytics" value="${googleAnalytics}" />
                <entry key="liveSite" value="${liveSite}" />
            </map>
        </property>
    </bean>


    <!-- Creates a MySQL Datasource -->
    <bean id="komp2DataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${komp2url}" />
        <property name="username" value="${komp2username}" />
        <property name="password" value="${komp2password}" />
    </bean>
    <bean id="ontodbDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${ontodburl}" />
        <property name="username" value="${ontodbusername}" />
        <property name="password" value="${ontodbpassword}" />
    </bean>
    <bean id="admintoolsDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${admintoolsurl}" />
        <property name="username" value="${admintoolsusername}" />
        <property name="password" value="${admintoolspassword}" />
    </bean>

    <bean id="observationIndexer" class="org.mousephenotype.cda.indexers.ObservationIndexer" />

    <!-- used for concurrently loading the experiment core -->
    <bean id="observationIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/experiment"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>

</beans>
